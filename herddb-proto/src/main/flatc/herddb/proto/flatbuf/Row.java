// automatically generated by the FlatBuffers compiler, do not modify

package herddb.proto.flatbuf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Row extends Table {
  public static Row getRootAsRow(ByteBuffer _bb) { return getRootAsRow(_bb, new Row()); }
  public static Row getRootAsRow(ByteBuffer _bb, Row obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Row __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AnyValueWrapper cells(int j) { return cells(new AnyValueWrapper(), j); }
  public AnyValueWrapper cells(AnyValueWrapper obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int cellsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createRow(FlatBufferBuilder builder,
      int cellsOffset) {
    builder.startObject(1);
    Row.addCells(builder, cellsOffset);
    return Row.endRow(builder);
  }

  public static void startRow(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addCells(FlatBufferBuilder builder, int cellsOffset) { builder.addOffset(0, cellsOffset, 0); }
  public static int createCellsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCellsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRow(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

